// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Data;

#nullable disable

namespace core.Migrations
{
    [DbContext(typeof(WalletContext))]
    [Migration("20220131075505_SpecificUserId")]
    partial class SpecificUserId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("server.Data.DTOs.NotificationDto", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReserveId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<string>("TargetName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("server.Data.DTOs.ReserveDto", b =>
                {
                    b.Property<int>("ReserveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReserveId"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestAccountSpendingAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<int>("OwnerAccountSpendingAccountId")
                        .HasColumnType("int");

                    b.HasKey("ReserveId");

                    b.HasIndex("DestAccountSpendingAccountId");

                    b.HasIndex("OwnerAccountSpendingAccountId");

                    b.ToTable("Reserves");
                });

            modelBuilder.Entity("server.Data.DTOs.SavingAccountDto", b =>
                {
                    b.Property<int>("SavingsAccountEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SavingsAccountEntityId"), 1L, 1);

                    b.Property<int>("CalculatedFunds")
                        .HasColumnType("int");

                    b.Property<int>("DepositFunds")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SavingsAccountEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("SavingAccounts");
                });

            modelBuilder.Entity("server.Data.DTOs.SpendingAccountDto", b =>
                {
                    b.Property<int>("SpendingAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpendingAccountId"), 1L, 1);

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.HasKey("SpendingAccountId");

                    b.ToTable("SpendingAccounts");
                });

            modelBuilder.Entity("server.Data.DTOs.StatDto", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId", "UserId");

                    b.ToTable("DoneTasks");
                });

            modelBuilder.Entity("server.Data.DTOs.TaskDto", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long>("DayInTheWeek")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EveryOtherWeek")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotBefore")
                        .HasColumnType("datetime2");

                    b.Property<int>("Payout")
                        .HasColumnType("int");

                    b.Property<int>("SpecificUserId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Week")
                        .HasColumnType("bit");

                    b.HasKey("TaskId");

                    b.HasIndex("SpecificUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("server.Data.DTOs.UserDto", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("SpendingAccountId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("SpendingAccountId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("server.Data.DTOs.NotificationDto", b =>
                {
                    b.HasOne("server.Data.DTOs.UserDto", "Sender")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("server.Data.DTOs.ReserveDto", b =>
                {
                    b.HasOne("server.Data.DTOs.SpendingAccountDto", "DestAccount")
                        .WithMany("ReservedIncomingAmounts")
                        .HasForeignKey("DestAccountSpendingAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.DTOs.SpendingAccountDto", "OwnerAccount")
                        .WithMany("ReservedAmounts")
                        .HasForeignKey("OwnerAccountSpendingAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestAccount");

                    b.Navigation("OwnerAccount");
                });

            modelBuilder.Entity("server.Data.DTOs.SavingAccountDto", b =>
                {
                    b.HasOne("server.Data.DTOs.UserDto", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Data.DTOs.TaskDto", b =>
                {
                    b.HasOne("server.Data.DTOs.UserDto", "TargetUser")
                        .WithMany()
                        .HasForeignKey("SpecificUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Data.DTOs.UserDto", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("TargetUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Data.DTOs.UserDto", b =>
                {
                    b.HasOne("server.Data.DTOs.SpendingAccountDto", "SpendingAccount")
                        .WithMany()
                        .HasForeignKey("SpendingAccountId");

                    b.Navigation("SpendingAccount");
                });

            modelBuilder.Entity("server.Data.DTOs.SpendingAccountDto", b =>
                {
                    b.Navigation("ReservedAmounts");

                    b.Navigation("ReservedIncomingAmounts");
                });

            modelBuilder.Entity("server.Data.DTOs.UserDto", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
